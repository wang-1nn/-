(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['vue3-resize'] = {}, global.vue));
}(this, (function (exports, vue) { 'use strict';

  function getInternetExplorerVersion() {
    const ua = window.navigator.userAgent;
    const msie = ua.indexOf('MSIE ');

    if (msie > 0) {
      // IE 10 or older => return version number
      return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    const trident = ua.indexOf('Trident/');

    if (trident > 0) {
      // IE 11 => return version number
      const rv = ua.indexOf('rv:');
      return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    const edge = ua.indexOf('Edge/');

    if (edge > 0) {
      // Edge (IE 12+) => return version number
      return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    } // other browser


    return -1;
  }

  let isIE;

  function initCompat() {
    if (!initCompat.init) {
      initCompat.init = true;
      isIE = getInternetExplorerVersion() !== -1;
    }
  }

  var script = {
    name: 'ResizeObserver',
    props: {
      showTrigger: {
        type: Boolean,
        default: false
      }
    },
    emits: ['notify'],

    setup(props, {
      emit
    }) {
      let _w = 0;
      let _h = 0;
      const elRef = vue.ref(null);
      let _resizeObject = null;

      const compareAndNotify = () => {
        if (_w !== elRef.value.offsetWidth || _h !== elRef.value.offsetHeight) {
          _w = elRef.value.offsetWidth;
          _h = elRef.value.offsetHeight;
          emit('notify', {
            width: _w,
            height: _h
          });
        }
      };

      const addResizeHandlers = () => {
        _resizeObject.contentDocument.defaultView.addEventListener('resize', compareAndNotify);

        compareAndNotify();
      };

      const removeResizeHandlers = () => {
        if (_resizeObject && _resizeObject.onload) {
          if (!isIE && _resizeObject.contentDocument) {
            _resizeObject.contentDocument.defaultView.removeEventListener('resize', compareAndNotify);
          }

          elRef.value.removeChild(_resizeObject);
          _resizeObject.onload = null;
          _resizeObject = null;
        }
      };

      vue.onMounted(() => {
        initCompat();
        _w = elRef.value.offsetWidth;
        _h = elRef.value.offsetHeight;
        const object = document.createElement('object');
        _resizeObject = object;
        object.setAttribute('aria-hidden', 'true');
        object.setAttribute('tabindex', '-1');
        object.onload = addResizeHandlers;
        object.type = 'text/html';

        if (isIE) {
          elRef.value.appendChild(object);
        }

        object.data = 'about:blank';

        if (!isIE) {
          elRef.value.appendChild(object);
        }

        if (props.showTrigger) {
          compareAndNotify();
        }
      });
      vue.onBeforeUnmount(() => {
        removeResizeHandlers();
      });
      return {
        elRef
      };
    }

  };

  const _hoisted_1 = {
    ref: "elRef",
    class: "vue3-resize-observer",
    tabindex: "-1"
  };
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock("div", _hoisted_1, null, 512
    /* NEED_PATCH */
    );
  }

  script.render = render;
  script.__file = "src/package/ResizeObserver/ResizeObserver.vue";

  script.install = function (app) {
    app.component(script.name, script);
  };

  var version = "0.2.0";

  const install = app => {
    app.use(script);
  }; // Plugin


  const Vue3Resize = {
    version,
    install
  };

  exports.ResizeObserver = script;
  exports.default = Vue3Resize;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=vue3-resize.umd.js.map
